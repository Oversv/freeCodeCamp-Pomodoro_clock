{"version":3,"sources":["audio/bell.mp3","components/Header.js","components/BreakPanel.js","components/SesionPanel.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","BreakPanel","content","increment","decrement","id","onClick","SesionPanel","Display","display","min","sec","reset","start","pause","audioRef","useRef","resetRef","current","play","toString","padStart","src","audio","ref","currentTime","App","useState","breakLength","setBreakLength","breakTime","setBreakTime","sessionLength","setSessionLength","minutes","setMinutes","seconds","setSeconds","active","setActice","setDisplay","useEffect","timer","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43a9f952.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.f3e1419d.mp3\";","import React from 'react';\n\nconst Header = () =>{\n    return(\n        <header className=\"header\">\n            <h1>Pomodoro Clock</h1>\n        </header>\n    )\n}\nexport default Header;","import React from \"react\"\n\nconst BreakPanel= ({content, increment, decrement}) =>{\n\n    return(\n        <div id=\"break-label\" className=\"panel-box\" >            \n            <h3>Break Length</h3>\n            <div className=\"panel-options\">\n                <i id=\"break-increment\" className=\"fas fa-plus-circle\" onClick={increment}/>\n                <p id=\"break-length\">{content}</p>\n                <i id=\"break-decrement\" className=\"fas fa-minus-circle\" onClick={decrement}/>\n            </div> \n        </div>\n    )\n}\n\nexport default BreakPanel","import React from \"react\"\n\nconst SesionPanel= ({content, increment, decrement}) =>{\n\n    return(\n        <div id=\"session-label\" className=\"panel-box\" >            \n            <h3>Session Length</h3>\n            <div className=\"panel-options\">\n                <i id=\"session-increment\" className=\"fas fa-plus-circle\" onClick={increment}/>\n                <p id=\"session-length\">{content}</p>\n                <i id=\"session-decrement\" className=\"fas fa-minus-circle\" onClick={decrement}/>\n            </div> \n        </div>\n    )\n}\n\nexport default SesionPanel","import React, {useRef} from \"react\"\nimport audio from \"../audio/bell.mp3\"\n/**padStart fill a string with a caracter in this case 0 to simulate the clock  */\n\nconst Display= ({ display, min, sec, reset, start, pause}) =>{\n    \n    const audioRef = useRef()\n    const resetRef = useRef()\n\n    const handleAudio = () =>{      \n        audioRef.current.play()\n    }\n\n    const handleReset = () =>{\n        reset()\n        audioRef.current.pause()\n        audioRef.current.currentTime = 0\n    }\n\n    if(min === 0 && sec === 0) handleAudio()\n\n    return(\n        <div className=\"display-box\"> \n            <div>\n                <h2 id=\"timer-label\">{display}</h2>  \n                <div className=\"display\">\n                    <p id=\"time-left\" className=\"display-digits\">{`${min.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`}</p>\n                </div>       \n                <audio id=\"beep\" src={audio} ref={audioRef}/>   \n            </div>  \n\n            <div className=\"display-buttons\">\n                <i id=\"start_stop\" className=\"fas fa-play\" onClick={start}></i>\n                <i className=\"fas fa-pause\" onClick={pause}></i>\n                <i id=\"reset\" className=\"fas fa-sync-alt\" onClick={handleReset} ref={resetRef}></i>\n            </div>\n        </div>\n    )\n}\n\nexport default Display","import React, {useState, useEffect} from 'react';\nimport Header from './components/Header'\nimport BreakPanel from './components/BreakPanel'\nimport SesionPanel from './components/SesionPanel'\nimport Display from './components/Display'\nimport './app.css'\n\nfunction App() { \n\n  const [breakLength, setBreakLength] = useState(5)\n  const [breakTime, setBreakTime] = useState(true)\n  const [sessionLength, setSessionLength] = useState(25)\n  const [minutes, setMinutes] = useState(25)\n  const [seconds, setSeconds] = useState(0)\n  const [active, setActice] = useState(false)\n  const [display, setDisplay] = useState(\"Session\")\n\n  const handleBreakIncrement = () =>{\n\n    if(breakLength < 60  && !active) {\n      \n      setBreakLength(breakLength + 1)  \n\n      if(display === \"Break\"){\n\n        setMinutes(breakLength + 1)   \n        setSeconds(0)\n      }\n\n    } \n   \n  }\n\n  const handleBreakDecrement = () =>{\n\n    if(breakLength > 1 && !active) {\n\n      setBreakLength(breakLength - 1)   \n\n      if(display === \"Break\"){\n        setMinutes(breakLength -1)   \n        setSeconds(0)  \n      }\n\n    }\n     \n  }\n\n  const handleSessionIncrement = () =>{\n\n    if(sessionLength < 60  && !active) {\n      \n      setSessionLength(sessionLength + 1)\n      setMinutes(sessionLength + 1)\n      setSeconds(0)\n\n    } \n    \n  }\n\n  const handleSessionDecrement = () =>{\n\n    if(sessionLength > 1 && !active) {\n\n      setSessionLength(sessionLength - 1)\n      setMinutes(sessionLength + -1)\n      setSeconds(0) \n\n    }\n\n  }\n\n  const handleStart = () =>{\n    active ? setActice(false) :  setActice(true)        \n  }\n  \n  const handlePause = () =>{    \n    setActice(false)  \n  }\n  \n  const handleReset = () =>{\n\n    setActice(false)\n    setBreakLength(5)\n    setSessionLength(25)\n    setMinutes(25)\n    setSeconds(0)\n    setBreakTime(true)\n    setDisplay(\"Session\")\n\n  }  \n\n  useEffect(()=>{\n    \n    let timer\n\n    if(active){  \n     \n      timer = setInterval(()=>{\n        \n        if(seconds === 0 && minutes === 0){\n            \n          if(breakTime){\n\n            setDisplay(\"Break\")\n            setMinutes(breakLength)\n            setBreakTime(false)\n\n          }else{\n\n            setDisplay(\"Session\")\n            setMinutes(sessionLength)  \n            setBreakTime(true)\n\n          }\n\n        }else if(seconds === 0){\n\n          setSeconds(59)\n          setMinutes(minutes => minutes -1)\n\n        }else{\n\n          setSeconds(seconds =>seconds -1)\n\n        } \n\n      }, 1000)\n    \n    }else{\n    \n      clearInterval(timer)  \n\n    }\n\n    return ()=> clearInterval(timer)\n    \n  },[active, seconds, minutes])\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div className=\"main\">\n        <Display\n          display = {display}\n          min = {minutes}\n          sec = {seconds}        \n          start = {handleStart}\n          pause = {handlePause}\n          reset = {handleReset}      \n        />\n        <div className=\"panels\">\n          <BreakPanel \n            content={breakLength}\n            increment = {handleBreakIncrement}\n            decrement = {handleBreakDecrement}\n          />\n          <SesionPanel \n            content={sessionLength}\n            increment = {handleSessionIncrement}\n            decrement = {handleSessionDecrement}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}